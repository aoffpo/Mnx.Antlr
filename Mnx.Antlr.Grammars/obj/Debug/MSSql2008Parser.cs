//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Steve\git\Mnx.Antlr\Mnx.Antlr.Grammars\Grammars\MSSql2008\MSSql2008.g4 by ANTLR 4.5-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Mnx.Antlr.Grammars.MSSql2008 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class MSSql2008Parser : Parser {
	public const int
		Single_Line_Comment=1, Multiline_Comment=2, All_Valid=3, Alphanumeric=4, 
		Control_Codes=5, Digit=6, Letter=7, Whitespace=8, Any_Ch=9, String_Ch=10, 
		Id_Ch_Standard=11, Id_Ch_Delimited_Bracket=12, Id_Ch_Delimited_Bracket_Start=13, 
		Id_Ch_Delimited_Quote=14, Id_Ch_Delimited_Quote_Start=15, Hex_Ch=16, Nonspace_Ch=17, 
		IntegerLiteral=18, RealLiteral=19, HexLiteral=20, Id=21, QuotedId=22, 
		LocalId=23, SingleQuotedId=24, SystemVarId=25, SystemFuncId=26, TempTableId=27;
	public const int
		RULE_parse = 0;
	public static readonly string[] ruleNames = {
		"parse"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "Single_Line_Comment", "Multiline_Comment", "All_Valid", "Alphanumeric", 
		"Control_Codes", "Digit", "Letter", "Whitespace", "Any_Ch", "String_Ch", 
		"Id_Ch_Standard", "Id_Ch_Delimited_Bracket", "Id_Ch_Delimited_Bracket_Start", 
		"Id_Ch_Delimited_Quote", "Id_Ch_Delimited_Quote_Start", "Hex_Ch", "Nonspace_Ch", 
		"IntegerLiteral", "RealLiteral", "HexLiteral", "Id", "QuotedId", "LocalId", 
		"SingleQuotedId", "SystemVarId", "SystemFuncId", "TempTableId"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MSSql2008.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MSSql2008Parser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ParseContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MSSql2008Parser.Eof, 0); }
		public ITerminalNode[] Any_Ch() { return GetTokens(MSSql2008Parser.Any_Ch); }
		public ITerminalNode Any_Ch(int i) {
			return GetToken(MSSql2008Parser.Any_Ch, i);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMSSql2008Listener typedListener = listener as IMSSql2008Listener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMSSql2008Listener typedListener = listener as IMSSql2008Listener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMSSql2008Visitor<TResult> typedVisitor = visitor as IMSSql2008Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_parse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==Any_Ch) {
				{
				{
				State = 2; Match(Any_Ch);
				}
				}
				State = 7;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 8; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x1D\r\x4\x2\t\x2"+
		"\x3\x2\a\x2\x6\n\x2\f\x2\xE\x2\t\v\x2\x3\x2\x3\x2\x3\x2\x2\x2\x2\x3\x2"+
		"\x2\x2\x2\f\x2\a\x3\x2\x2\x2\x4\x6\a\v\x2\x2\x5\x4\x3\x2\x2\x2\x6\t\x3"+
		"\x2\x2\x2\a\x5\x3\x2\x2\x2\a\b\x3\x2\x2\x2\b\n\x3\x2\x2\x2\t\a\x3\x2\x2"+
		"\x2\n\v\a\x2\x2\x3\v\x3\x3\x2\x2\x2\x3\a";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Mnx.Antlr.Grammars.MSSql2008
