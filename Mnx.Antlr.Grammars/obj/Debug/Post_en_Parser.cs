//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Steve\git\Mnx.Antlr\Mnx.Antlr.Grammars\Grammars\Post.en\Post_en_Parser.g4 by ANTLR 4.5-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Mnx.Antlr.Grammars.Grammars.Post.en {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class Post_en_Parser : Parser {
	public const int
		YESTERDAY=1, TODAY=2, TOMORROW=3, TONIGHT=4, MORNING=5, AFTERNOON=6, EVENING=7, 
		DAY=8, SUNDAY=9, MONDAY=10, TUESDAY=11, WEDNESDAY=12, THURSDAY=13, FRIDAY=14, 
		SATURDAY=15, DIGIT=16, WS=17;
	public const int
		RULE_post = 0;
	public static readonly string[] ruleNames = {
		"post"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, "YESTERDAY", "TODAY", "TOMORROW", "TONIGHT", "MORNING", "AFTERNOON", 
		"EVENING", "DAY", "SUNDAY", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", 
		"FRIDAY", "SATURDAY", "DIGIT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Post_en_Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public Post_en_Parser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class PostContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(Post_en_Parser.Eof, 0); }
		public PostContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_post; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPost_en_ParserListener typedListener = listener as IPost_en_ParserListener;
			if (typedListener != null) typedListener.EnterPost(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPost_en_ParserListener typedListener = listener as IPost_en_ParserListener;
			if (typedListener != null) typedListener.ExitPost(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPost_en_ParserVisitor<TResult> typedVisitor = visitor as IPost_en_ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPost(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostContext post() {
		PostContext _localctx = new PostContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_post);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x13\a\x4\x2\t\x2"+
		"\x3\x2\x3\x2\x3\x2\x2\x2\x2\x3\x2\x2\x2\x2\x5\x2\x4\x3\x2\x2\x2\x4\x5"+
		"\a\x2\x2\x3\x5\x3\x3\x2\x2\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Mnx.Antlr.Grammars.Grammars.Post.en
